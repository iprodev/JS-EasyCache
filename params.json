{"name":"JS-EasyCache","tagline":"An easy & fast localStorage-based memcache-inspired client-side caching library with lossless data compression support.","body":"JS-EasyCache\r\n===============================\r\nThis is a easy & fast library that emulates `memcache` functions using HTML5 `localStorage` with lossless data compression support, so that you can cache data on the client\r\nand associate an expiration time with each piece of data. If the `localStorage` limit (~5MB) is exceeded, it tries to create space by removing the items that are closest to expiring anyway. If `localStorage` is not available at all in the browser, the library degrades by simply not caching and all cache requests return null.\r\n\r\nJS-EasyCache uses high-performance lossless data compression algorithm to make data stored size smaller so you can store more data to the `localStorage`.\r\n\r\nMethods\r\n-------\r\n\r\nThe library exposes 9 methods: `set()`, `get()`, `remove()`, `flush()`, `flushExpired()`, `setBucket()`, `resetBucket()`, `supported()`, and `enableWarnings()`.\r\n\r\n* * *\r\n\r\n### EasyCache.set\r\nStores the value in localStorage. Expires after specified number of minutes.\r\n#### Arguments\r\n1. `key` (**string**)\r\n2. `value` (**Object|string**)\r\n3. `time` (**number: optional**)\r\n\r\n* * *\r\n\r\n### EasyCache.get\r\nRetrieves specified value from localStorage, if not expired.\r\n#### Arguments\r\n1. `key` (**string**)\r\n\r\n#### Returns\r\n**string | Object** : The stored value. If no value is available, null is returned.\r\n\r\n* * *\r\n\r\n### EasyCache.remove\r\nRemoves a value from localStorage.\r\n#### Arguments\r\n1. `key` (**string**)\r\n\r\n* * *\r\n\r\n### EasyCache.flush\r\nRemoves all EasyCache items from localStorage without affecting other data.\r\n\r\n* * *\r\n\r\n### EasyCache.setBucket\r\nAppends CACHE_PREFIX so EasyCache will partition data in to different buckets\r\n#### Arguments\r\n1. `bucket` (**string**)\r\n\r\nUsage\r\n-------\r\n\r\nThe interface should be familiar to those of you who have used `memcache`, and should be easy to understand for those of you who haven't.\r\n\r\nFor example, you can store a string for 2 minutes using `EasyCache.set()`:\r\n\r\n```js\r\nEasyCache.set('greeting', 'Hello World!', 2);\r\n```\r\n\r\nYou can then retrieve that string with `EasyCache.get()`:\r\n\r\n```js\r\nalert(EasyCache.get('greeting'));\r\n```\r\n\r\nYou can remove that string from the cache entirely with `EasyCache.remove()`:\r\n\r\n```js\r\nEasyCache.remove('greeting');\r\n```\r\n\r\nYou can remove all items from the cache entirely with `EasyCache.flush()`:\r\n\r\n```js\r\nEasyCache.flush();\r\n```\r\n\r\nYou can remove only expired items from the cache entirely with `EasyCache.flushExpired()`:\r\n\r\n```js\r\nEasyCache.flushExpired();\r\n```\r\n\r\nReturns whether local storage is supported.:\r\n\r\n```js\r\nalert(EasyCache.supported());\r\n```\r\n\r\nThe library also takes care of serializing objects, so you can store more complex data:\r\n\r\n```js\r\nEasyCache.set('data', {'name': 'Hemn', 'age': 26}, 2);\r\n```\r\n\r\nAnd then when you retrieve it, you will get it back as an object:\r\n\r\n```js\r\nalert(EasyCache.get('data').name);\r\n```\r\n\r\nIf you have multiple instances of EasyCache running on the same domain, you can partition data in a certain bucket via:\r\n\r\n```js\r\nEasyCache.set('response', '...', 2);\r\nEasyCache.setBucket('lib');\r\nEasyCache.set('path', '...', 2);\r\nEasyCache.flush(); // Only removes 'path' which was set in the lib bucket\r\nEasyCache.resetBucket();\r\nEasyCache.flush(); // Remove all EasyCache items and expiry markers without affecting rest of localStorage\r\n```\r\n\r\nFor more live examples, play around with the demo here:\r\nhttp://iprodev.github.io/JS-EasyCache/demo/index.html\r\n\r\n\r\nReal-World Usage\r\n----------\r\nThis library was originally developed with the use case of caching results of JSON API queries\r\nto speed up my webapps and give them better protection against flaky APIs.\r\n\r\nFor example use `EasyCache` to fetch Youtube API results for 10 minutes:\r\n\r\n```js\r\nvar key = 'youtube:' + query;\r\nvar json = EasyCache.get(key);\r\nif (json) {\r\n  processJSON(json);\r\n} else {\r\n  fetchJSON(query);\r\n}\r\n\r\nfunction processJSON(json) {\r\n  // ..\r\n}\r\n\r\nfunction fetchJSON() {\r\n  var searchUrl = 'http://gdata.youtube.com/feeds/api/videos';\r\n  var params = {\r\n   'v': '2', 'alt': 'jsonc', 'q': encodeURIComponent(query)\r\n  }\r\n  JSONP.get(searchUrl, params, null, function(json) {\r\n    processJSON(json);\r\n    EasyCache.set(key, json, 10);\r\n  });\r\n}\r\n```\r\n\r\nIt does not have to be used for only expiration-based caching, however. It can also be used as just a wrapper for `localStorage`, as it provides the benefit of handling JS object (de-)serialization.\r\n\r\nBrowser Support\r\n----------------\r\n\r\nThe `EasyCache` library should work in all browsers where `localStorage` is supported.\r\nA list of those is here:\r\nhttp://caniuse.com/#search=localstorage\r\n\r\n## Credits\r\n\r\nJS-EasyCache was created by [Hemn Chawroka](http://iprodev.com) from [iProDev](http://iprodev.com). Released under the MIT license.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}